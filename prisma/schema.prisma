// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPPORT
  USER
}

enum UserStatus {
  ACTIVE
  PENDING
  BANNED
  DELETED
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String
  password   String
  balance    Float       @default(0)
  role       UserRole    @default(USER)
  status     UserStatus  @default(PENDING) // Pending = email not verified
  recipients Recipient[]
  orders     Order[]

  //tokens    Token[]
  // recharges Recharge[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum RecipientStatus {
  PENDING
  VERIFIED
  REMOVED
}

model Recipient {
  id                    String          @id @default(uuid())
  name                  String
  region                String
  profileIconId         Int
  requiredProfileIconId Int             @map("required_profile_icon_id")
  puuid                 String
  status                RecipientStatus @default(PENDING)
  user                  User            @relation(fields: [userId], references: [id])
  orders                Order[]
  userId                String          @map("user_id")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
}

// enum TokenType {
//   EMAIL_VERIFICATION
//   PASSWORD_RESET
// }

// model Token {
//   id        String    @id @default(uuid())
//   type      TokenType
//   token     String    @unique
//   userId    String
//   user      User      @relation(fields: [userId], references: [id])
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// enum RechargeMethod {
//   PIX
//   BITCOIN
//   ETHEREUM
//   LITECOIN
//   MANUALLY
// }

// enum RechargeStatus {
//   PENDING
//   WAITING_CONFIRMATION
//   CONFIRMED
//   CHARGEBACK
//   CANCELED
//   FAILED
// }

// model Recharge {
//   id        String         @id @default(uuid())
//   method    RechargeMethod
//   status    RechargeStatus @default(PENDING)
//   amount    Float
//   userId    String
//   user      User           @relation(fields: [userId], references: [id])
//   createdAt DateTime       @default(now())
//   updatedAt DateTime       @updatedAt
// }

enum LeagueAccountType {
  GIFT
  MANAGER
}

model LeagueAccount {
  id                        String             @id @default(uuid())
  region                    String
  username                  String
  password                  String
  rp                        Int
  ip                        Int
  partnerToken              String             @map("partner_token") @db.Text()
  partnerTokenExpireAt      DateTime           @map("partner_token_expire_at")
  userInfoToken             String?            @map("user_info_token") @db.Text()
  sessionQueueToken         String?            @map("session_queue_token") @db.Text()
  sessionQueueTokenExpireAt DateTime?          @map("session_queue_token_expire_at")
  type                      LeagueAccountType
  orders                    OrderTransaction[]
  createdAt                 DateTime           @default(now()) @map("created_at")
  updatedAt                 DateTime           @updatedAt @map("updated_at")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
  FAILED
}

model Order {
  id           String             @id @default(uuid())
  transactions OrderTransaction[]
  status       OrderStatus        @default(PENDING)
  recipient    Recipient          @relation(fields: [recipientId], references: [id])
  user         User               @relation(fields: [userId], references: [id])

  recipientId String @map("recipient_id")
  userId      String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum OrderTransactionStatus {
  PENDING
  ACCEPTED
  FULFILLMENT_SUCCESSFUL
  FAILED
  OTHER
}

model OrderTransaction {
  id     String                 @id @default(uuid()) /// This id will be the same of riot games transaction id
  price  Float
  status OrderTransactionStatus

  order  Order                @relation(fields: [orderId], references: [id])
  item   OrderTransactionItem @relation(fields: [itemId], references: [id])
  sender LeagueAccount?       @relation(fields: [senderId], references: [id])

  orderId  String  @map("order_id")
  itemId   String  @unique @map("item_id")
  senderId String? @map("sender_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum Currency {
  IP
  RP
}

model OrderTransactionItem {
  id               String            @id @default(uuid())
  name             String
  iconUrl          String            @default("") @map("icon_url")
  currency         Currency
  price            Float
  inventoryType    String            @map("inventory_type")
  subInventoryType String?           @default("") @map("sub_inventory_type")
  offerId          String            @map("offer_id")
  transaction      OrderTransaction?
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
}
